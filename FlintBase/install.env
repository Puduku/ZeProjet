#install.env - bash script extension
#PRE: PROJVAR variable is set (project var name)
#     ExtraInstallOrUpdate (optional) function is defined if extra update operations are required;
#     ExtraInstallOrUpdate function's PRE are: see POST below 
#POST: - PROJVAL variable is set (project var value) 
#      - FLINT variable is set 
#      - basePosition variable is set (base project position)

#TODO: --back : ne reporte PAS la suppression des fichiers


trap 'echo ABORTED AT LINE=$LINENO ; exit -1' ERR

cd "$(dirname "$0")"
typeset -r basePosition="$PWD"
cd - > /dev/null
typeset -r _posArg="$1"

typeset -r _arg0="$0"
Help () {
  echo "(Help display reason is: $@)"
  echo "Operation is cancelled ; please check your parameters." 
  echo "USAGE: $_arg0 ( <${PROJVAR:?} position (directory)> | --in | --back | --up | --info  | --suppress )"
  echo "  --in       : Inside installation" 
  echo "  --back     : Get back install changes in base [Before push]" 
  echo "  --up       : Update install with base changes [After pull]" 
  echo "  --info     : Show all installs managed by Flint" 
  echo "  --suppress : Suppress install" 
  exit 100 
}

if [ -z "$_posArg" ] ;then
  Help "Missing position argument."
fi

if [ ! -f "$basePosition/install.list" ] ;then
  Help "Wrong $basePosition : install.list file does not exist."
fi

eval unset ${PROJVAR:?}
if [ -f ~/.flintrc ] ;then
  source ~/.flintrc
fi

#PRE: following vars are set:
# - basePosition: base directory (contains 'install.list' file) 
ShowInstalls () {
  if [ -z "$FLINT" ] ;then 
    echo "Flint is not yet installed."
    return 
  fi
  echo "All Flint installations ; (*) is current project :"
  for inst in $FLINT_INSTALLS ;do
    if [ "${PROJVAR:?}" = "$inst" ] ;then
      echo -n "(*)"
    else
      echo -n "   "
    fi
    echo -n " $inst, installed in " 
    eval echo "\$$inst" 
  done 
}

#PRE: following vars are set:
# - basePosition: base directory (contains 'install.list' file) 
SuppressInstall () {
  eval PROJVAL=\$${PROJVAR:?}
  if [ -z "$PROJVAL" ] ;then
    Help "${PROJVAR:?} is not installed."
  fi
  echo "Check Flint installations..."
  local _toSupressList=
  local _toSupressFlag=F
  for inst in $FLINT_INSTALLS ;do
    if [ "$_toSupressFlag" = "T" ] ;then 
      _toSupressList="$inst $_toSupressList" 
    elif [ "${PROJVAR:?}" = "$inst" ] ;then
      _toSupressList="$inst" 
      _toSupressFlag=T
    fi
  done 
  for inst in $_toSupressList ;do 
    echo -n "Suppressing: $inst ..."
    if eval test -f "\$$inst/install.list" ;then 
      echo " (inside installation ; directory NOT removed) "
    else 
      eval rm -r "\$$inst" 
    fi
    if [ "$inst" != "FLINT" ] ;then
      cat ~/.flintrc | awk -v insta="$inst" '
BEGIN { b_display=1 ; }
{
  if (b_display == 1) { 
    if (substr($1,2) == insta) b_display=0;
    else print 
  } 
}' > ~/.flintrc_new
      mv ~/.flintrc_new ~/.flintrc
    else
      rm ~/.flintrc
    fi 
    echo "OK."
  done
  echo "Success!"
}

#PRE: following vars are set:
# - basePosition: base (factory) directory (contains 'install.list' file) 
# - srcPosition:
# - destPosition:
#TODO: cp does NOT report src permissions if dest already exist...
CopyBaseList () {
  if  [ "$srcPosition" = "$destPosition" ] ;then
    echo "(Inside installation)"
    return 0
  fi
  export destPosition
  _list=()
  IFS=$'\n'
  set -f ; _list=($(cat "$basePosition/install.list")) ; set +f
  IFS=$' \t\n'
  _expList=()
  typeset -i _i=0
  typeset -i _n=${#_list[@]}
  cd "$srcPosition"
  local _scr="_arg=\"{}\" ; mkdir -p \"$destPosition/\${_arg%/*}\""
  while [ $_i -lt $_n ] ;do 
    _item="${_list[$_i]}" 
    echo -n "Copying $_item file(s)..."
    if [ "${_item:0:1}" = ":" ] ;then
      _fP="${_item:1}"
      find . -name "$_fP" -exec bash -c "$_scr" \;
      find . -name "$_fP" -exec cp "{}" "$destPosition/{}" \; 
    else
      _subD="$(set -f ; dirname "${_list[$_i]}")"
      _fP="$(set -f ; basename "${_list[$_i]}")"
      if [ ! -d "$destPosition/$_subD/" ] ; then
        mkdir -p "$destPosition/$_subD/"
      fi
      cp "$_subD"/$_fP "$destPosition/$_subD/"
    fi
    echo "Ok."
    let "++_i"
  done
}

ExecExtraInstallOrUpdate () {
  ExtraInstallOrUpdate 2> /dev/null
  typeset -i _ret=$?
  if [ $_ret -eq 127 ] ;then
    echo "(No extra install or update actions)"
  elif [ $_ret -ne 0 ] ;then
    echo "ExtraInstallOrUpdate FAILED" > /dev/stderr  
    exit -1
  fi
}

if [ "$_posArg" = "--info" ]; then
  ShowInstalls
  Help "You asked for info."
elif [ "$_posArg" = "--suppress" ]; then
  SuppressInstall
  exit 0 
elif [ "$_posArg" = "--back" -o "$_posArg" = "--up" ]; then
  if [ ! -f ~/.flintrc ] ;then 
    Help "Flint environment is not installed."
  fi
  eval PROJVAL=\$${PROJVAR:?}
  if [ -z "$PROJVAL" -o ! -d "$PROJVAL" ] ;then
    Help "${PROJVAR:?} is not properly installed."
  fi
  if [ "$_posArg" = "--back" ]; then
    typeset -r destPosition="$basePosition"
    typeset -r srcPosition="$PROJVAL"
  else
    typeset -r srcPosition="$basePosition"
    typeset -r destPosition="$PROJVAL"
  fi
  echo "${PROJVAR:?}: report $srcPosition modifications in $destPosition..."
  CopyBaseList
  echo "OK."
  ExecExtraInstallOrUpdate
  exit 0
fi

# Install...

if [ ${PROJVAR:?} = "FLINT" -a -f ~/.flintrc ] ;then 
  Help "Flint environment is already installed."
fi
eval PROJVAL=\$${PROJVAR:?}
if [ -n "$PROJVAL" ] ;then 
  Help "${PROJVAR:?} environment is already installed."
fi

if [ "$_posArg" = "--in" ] ;then
  typeset -r destPosition="$basePosition" 
  srcPosition="$basePosition"
  echo "Use base $basePosition as installation position."
else
  if [ -e "$_posArg" ] ;then 
    Help "$_posArg file or directory already exist and cannot be used as ${PROJVAR:?} position."
  fi
  mkdir -p "$_posArg"
  if [ $? -ne 0 ] ;then
    Help "$_posArg cannot be used as ${PROJVAR:?} position."
  fi

  cd "$_posArg"
  typeset -r destPosition="$PWD"
  cd - > /dev/null
  srcPosition="$basePosition"

  echo "${PROJVAR:?}: Creating $destPosition content..."
  CopyBaseList
  echo OK.
fi

echo -n "${PROJVAR:?}: Creating or updating ~/.flintrc configuration file..."
if [ "${PROJVAR:?}" = "FLINT" ] ;then
  echo "# .flintrc - Flint's login shell profile
# This file is generated - DO NOT MODIFY" > ~/.flintrc
fi
# Update configuration file
echo "#${PROJVAR:?}
export ${PROJVAR:?}=\"$destPosition\"" >> ~/.flintrc
if [ "${PROJVAR:?}" = "FLINT" ] ;then
  echo "export FLINT_INSTALLS=\"${PROJVAR:?}\"" >> ~/.flintrc
else
  echo "export FLINT_INSTALLS=\"\$FLINT_INSTALLS ${PROJVAR:?}\"" >> ~/.flintrc
fi
  
echo OK.

echo -n "${PROJVAR:?}: Basic verification..."
. ~/.flintrc
PROJVAL=
eval PROJVAL=\$${PROJVAR:?}
if [ -z "$PROJVAL" ] ;then 
  echo "PROJVAR installation failed!" >> /dev/stderr
  exit -1
fi
echo OK.

ExecExtraInstallOrUpdate

Success () {
  echo "Success! To complete ${PROJVAR:?} installation:
- either remember to source ~/.flintrc file each time you log in;
- or add '. ~/.flintrc' line in your favorite login shell configuration file (e.g ~/.profile file) "
  exit 0
}

