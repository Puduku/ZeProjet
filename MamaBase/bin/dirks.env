# dirks.env : basic bash extension for 'Katzenjammer Kids' (bash) scripts


true
# <PUB> trueVal - true value 
typeset -ri trueVal=$? 
false
# <PUB> falseVal - One possible false value... 
typeset -ri falseVal=$? 

typeset -r ANSI_RED='\033[0;31m'
typeset -r ANSI_BLUE='\033[0;34;1m'
typeset -r ANSI_WHITE='\033[0;37;1m'
typeset -r ANSI_NC='\033[0m'


# <PUB> IsInteger - Indicates whether a parameter is well an integer 
IsInteger () {
  test "$1" -eq 0 2>> /dev/null 
  if [ $? != 2 ] ;then
    return $trueVal 
  fi 
  return $falseVal
}

# <PUB> ScriptFailure - Use this function to report (bash) script TECHNICAL flaw, which
# requires script investigation. 
# The main action of this function is retrieve the name of involved script(s) - with
# localization of line(s)... 
ScriptFailure () {
  echo -n "dirks (!) In ${BASH_SOURCE[1]}@ ${BASH_LINENO[0]} (" > /dev/stderr
  local -i _i=1
  while [ ${BASH_LINENO[$_i]} -ne 0 -a $_i -lt 5 ] ;do
    local _line=${BASH_LINENO[$_i]}
    let "_i++"
    echo -n  " -> ${BASH_SOURCE[$_i]}@ $_line" >> /dev/stderr
  done
  echo ") $*" >> /dev/stderr 
  exit 200 
}


# <PUB> Realpath - function 
# - When one argument :
#  + $1: pathname
# - When three arguments :
#  + $1: relative base (e.g. $HOME) 
#  + $2: relative to (e.g $PWD) 
#  + $3: pathname 
Realpath () {
  if [ -z "$1" ] ;then
    ScriptFailure "Empty path (arg1)"
  fi
  if [ $# -eq 1 ] ;then
    realpath "$1"
  elif [ $# -eq 3 ] ;then
    if [ -z "$2" -o -z "$3" ] ;then
      ScriptFailure "Empty path(s) (args2/3: [$2]/[$3])"
    fi
    #TODO: gedrer ici cas relatif toto => ./toto (pour l'instant c'est fait dans le realpath 
    #maison, et c'est pas standard...
    realpath --relative-base="$1" --relative-to="$2" "$3"
  else 
    ScriptFailure "Wrong number of arguments: $#"
  fi
}

# <PUB> RCARealpath - this function builds "real - canonicalized absolute" pathname. 
# real (RCA) pathnames allow reliable files identification and differentation based on plain
# string comparison of pathnames...  
# Notice: may of course contain white space(s)...  
# Passed:
#  -$1: pathname 
RCARealpath () {
  if [ "$#" != 1 ] ;then
    ScriptFailure "Wrong number of argument: $# (one expected)"
  fi
  Realpath "$1"
}

# <PUB> WideLocation - this function builds "smart" location corresponding to given pathname. 
# That is, the function issues "relative" path (vis-a-vis the object-working directory) when the 
# "move" happens within the current user's home directory. (otherwize, absolute path is chosen)
# In short, that function helps building more concise and readable commands.
# Passed:
#  -$1: pathname 
WideLocation () {
  if [ -n "$1" ] ;then
    Realpath "${HOME:-/}" "$PWD" "$1" 
  fi
}


