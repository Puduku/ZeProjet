# adolf.esh : (bash) extension for hans & fritz (*) scripts

# "Nasty" utilities for scripts (working around parsing problems with dynamic generation of args
# arrays containing white spaces...)
# See <PUB> labels 

# <PUB> Adolf - Construct a list a arguments for evaluation
# Typical use cases:
# - command construction (see <PUB> EvalCommand of "mama.esh" extension)
# - dynamic array initialization via "eval"   
# Note: at first glance, the mechanism looks like needless complication ("re-builds" a list of 
# parameters from an array) but is finally indispensable to construct dynamically list of 
# parameters with white spaces...  
# Other methods do exist in bash, but none is straightforward in bash... 
# "Empirically" this method happens to work without (big) trouble... 
# Summary (to avoid headaches...):
# 1. We can use Adolf when it's about constructing dynamical arrays with elements possibly
#    containing white spaces
# 2. Adolf contructs dynamically a list of parameters, but that list must be "evaluated".
#    That is Adolf's output need be "passed" to "eval" builtin - or to function thar evaluates its
#    arguments like EvalCommand (see mama.esh).
# 3. Adolf materializes white spaces individually (with back-slash) in lieu of wrapping each
#    argument within double quotes. As consequence, empty arguments cannot be "materialized" ;
#    empty arguments "vanish" in the list of arguments recreated by Adolf... 
# Passed
# "$@" : list of arguments (possibly containing white spaces...)
Adolf () {
  local _f
  for _f in "$@" ;do
    echo -n "${_f// /\\ } "
  done
}

# <PUB> Adolf_P - Construct a list a arguments for evaluation
# Each list argument is a concatenation of a prefix "distributed"
# with each item of array passed to the function
# See also generic Adolf function above. 
#
# Passed
# - "$1": prefix 
# - "$2 $3 ..." : list of arguments (possibly containing white spaces...)
Adolf_P () {
  local _prefix="${1// /\\ }"
  shift
  local _f
  for _f in "$@" ;do
    echo -n "$_prefix${_f// /\\ } " 
  done
}

# <PUB> Adolf_S - Construct a list a arguments for evaluation
# Each list argument is a concatenation of a suffix "distributed"
# with each item of array passed to the function
# See also generic Adolf function above. 
#
# Passed
# - "$1": suffix 
# - "$2 $3 ..." : list of arguments (possibly containing white spaces...)
Adolf_S () {
  local _suffix="${1// /\\ }"
  shift
  local _f
  for _f in "$@" ;do
    echo -n "${_f// /\\ }$_suffix " 
  done
}

# <PUB> Adolf_F - Construct a list a arguments for evaluation
# Each list argument is result of "stdout outputting" function call applied 
# with each item of array passed to the function
# See also generic Adolf function above. 
#
# Passed
# - "$1": "stdout outputting" function name, called for each list argument 
# - "$2 $3 ..." : list of arguments (possibly containing white spaces...)
Adolf_F () {
  local _fct="$1"
  shift 1
  local _f
  for _f in "$@" ;do 
    local _res=$("$_fct" "$_f")
    echo -n "${_res// /\\ } " 
  done
}


# <PUB> Adolf_F2 - Construct a list a arguments for evaluation
# Same purpose than Adolf_F function above, but allows prodiding an 
# extra parameter to the "stdout ouputting" function. 
#
# Passed
# - "$1": "stdout outputting" function name, called for each list argument 
# - "$2": function extra parameter 
# - "$3 $4 ..." : list of arguments (possibly containing white spaces...)
Adolf_F2 () {
  local _fct="$1"
  local _arg="$2"
  shift 2
  local _f
  for _f in "$@" ;do 
    local _res=$("$_fct" "$_f" "$_arg")
    echo -n "${_res// /\\ } " 
  done
}
