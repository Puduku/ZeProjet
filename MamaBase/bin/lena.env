################################
# THE KATZENJAMMER KIDS : LENA #
################################
# Bash script extension for katzenjammer (kids) scripts 
# Uses "katzenjammer.env" bash extension (formerly read and executed in the script) 

# Compilation utilities...
# See <PUB> labels 

CC=gcc
CC_EXTRA_OPTS=()


# <PUB> IsOlder - indicates whether a file is older than any of the files (provided in a list)
#
# Args:
# $1: "the" file (pathname)
# $2: 
# - "H" flag => check ".h" files (if pathname is a directory) 
# - otherwise, 1st item (pathname) of (files/dirs list)
# ... : other items
IsOlder () {
  local _f1="$1"
  shift
  local _hFlag=$falseVal
  if [ "$1" = "H" ] ;then
    _hFlag=$trueVal
    shift
  fi  
  local _f
  for _f in "$@" ;do 
    if [ ! "$_f1" -nt "$_f" ] ;then
      return ${trueVal:?}
    fi 
    if [ -d "$_f1" -a $_hFlag = $trueVal ] ;then
      local _f2
      for _f2 in "$_f1"/*.h ;do
        if [ ! "$_f2" -nt "$_f" ] ;then
          return ${trueVal:?}
        fi 
      done
    fi
  done 
  return ${falseVal:?}
}


# <PUB> FlatName - Transform a source (.c) pathname into "flat" (local) file name 
# (that is, replace any '/' found in pathname by '-') 
# 
# Passed:
# - $1: C source pathname (.c) 
# - $2: (optional suffix) 
# Output: corresponding flat file name
FlatName() {
  local _d=$(dirname "$1")
  if [ "$_d" = "." ] ;then
    _d=
  else
    _d="${_d}-"
  fi
  echo -n "${_d//\//-}$(basename "$1" '.c')$2"
}


# <PUB> ObjectFlatName - Transform a source (.c) pathname into "flat" (local) "object" file name 
#
# Passed:
# - $1: C source pathname (.c) 
# - $2: (optional) object infix 
# Output: corresponding (.o) object file name
ObjectFlatName() {
  FlatName "$1" "${2}.o"
}


# <PUB> ExecutableFlatName - Transform a source (.c) pathname into "flat" (local) "executable" file name
#
# Passed:
# - $1: C source pathname (.c) 
# -$2: (optional suffix) 
# Output: corresponding executable file name
ExecutableFlatName() {
  FlatName "$1" "$2"
}



# <PUB> CommandClean - Handle "cleaning" options for (C) compilation-related scripts.
# All "object" (.o) and "library" (.a) found are automatically removed 
#
# Passed:
# - "$@" : extra list of files (executables...) to be removed  
CommandClean () {
  if [ "$cleaning" = c -o "$cleaning" = C ] ;then
    Step "Remove trailing objects (.o) and libraries (.a)"
#TODO: protedger les edtoiles ?
#TODO: sous-redpertoires ?
#TODO: exedcutables ??? ?
    EvalCommand rm -f -- '*.o *.a' $(Adolf "$@")
    if [ "$cleaning" = c ] ;then
       Success
    fi
  fi 
}

if [ -n "$FLINT" ] ;then
  if [ ! -d "$FLINT" ] ;then
    ScriptFailure "FLINT($FLINT) location is incorrect"
  fi  
fi

# <PUB> CommandCC - Compile C source files (and product corresponding object files)
# If asked, group all object files into a library. 
#
# Args:
# - ${CC_INCS[@]} include dirs 
# - ${CC_DEPS[@]} dependency header files or dirs (pathnames)
# - ${CC_OPTS[@]}
# - $1: C source (.c) pathname
# - $2: object (.o) pathname  
# - $3: objects library file pathname (empty arg => no library updated)  
CommandCC() {
  local _lib="$3"
  local _fs="$1"
  Info "Behold $_fs"
  local _fo="$2"
  local _new=$falseVal
  if IsOlder "$_fo" H "$_fs" "${CC_DEPS[@]}" ;then
    _new=$trueVal
    EvalCommand "$CC" "${CC_EXTRA_OPTS[@]}" "${CC_OPTS[@]}" -Wall -I$(WideLocation "$FLINT")  $(Adolf_P "-I" "${CC_INCS[@]}")  $(Adolf "$_fs") -c -o $(Adolf "$_fo") 
  fi
  if [ ! -z "$_lib" ] && ( [ $_new -eq $trueVal ] || IsOlder "$_lib" "$_fo" ) ;then
    EvalCommand ar -crs $(Adolf "$_lib") $(Adolf "$_fo") 
  fi
}


typeset -i _lena_n
typeset -i _lena_i

#TODO: proteger contre conflits d'exedcution
_lena_LoopControlReset () {
  _lena_n=$1
  _lena_i=0
}

_lena_LoopControlFirst () {
  if [ $_lena_i -eq 0 ] ;then
    return 0 #true 
  else
    return 1
  fi
}

_lena_LoopControlNext () {
  let "_lena_i++"
  if [ $_lena_i -lt $_lena_n ] ;then
    return 0 #true 
  else
    return 1
  fi
}


_lena_ProtectLdOpts() {
  _lena_LoopControlReset $#
  local _f
  for _f in "$@" ;do
    if _lena_LoopControlFirst ;then
      echo -n "-Wl,"
    fi
    echo -n "${_f// /,}"
    if _lena_LoopControlNext ;then
      echo -n ","
    fi
  done
}


# <PUB> CommandLd - Link objects and/or libraries and produce "executable". 
# - ${LD_OBJS[@]} objects files pathnames
# - ${LD_LIBS[@]} libraries  pathnames 
# - ${LD_OPTS[@]}
# - ${LD_OPT2S[@]}
# - $1: (output) executable (pathname) 
CommandLd() {
  if [ $planAbandoned = $trueVal ] ;then
    return 
  fi
  if [ -z "$1" ] ;then
    local _exe=a.out
  else
    local _exe="$1"
  fi
  Info "Behold $_exe"
  if IsOlder "$_exe" "${LD_LIBS[@]}" "${LD_OBJS[@]}" ;then
    EvalCommand "$CC" $(_lena_ProtectLdOpts "${LD_OPTS[@]}") $(Adolf "${LD_OBJS[@]}")  $(Adolf "${LD_LIBS[@]}") $(_lena_ProtectLdOpts "${LD_OPT2S[@]}") -o $(Adolf "$_exe") 
  fi
}

