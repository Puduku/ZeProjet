// c-flaws.topo version 1.93
// (c) Atos-Euronext Belgium - 2001, 2002, 2003
// (c) Puduku - 2023

// "Top ten (+ two)" C's REAL flaws
// ================================

// Idea: Ok, we admit the fact : C is NOT a flaw free programming language...
// However, our belief is that:
// - Once understood, these defects can be neatly "neutralized". Unfortunetely, do not expect any
//   "miracle": acceptable software quality is attainable with C programming, but remains laborious
//   to achieve; as soon as we release our efforts and are not careful enough - or too
//   overconfident, C-code "quality" degenerates very quickly... 
// - Finding a more adequate language, up to par, and getting rid of C for good would certainly be a
//   great progress in the software industry... if and only if we first carefully identify what is
//   actual C's responsibility in the "SHIT" of C programs - and DON'T UNDERESTIMATE our own role
//   as programmers in this shit.
//   That's to say:
//   + Simply switching to a "brand new" language will NEVER improve the situation.
//   + We must deeply QUESTION our own programming as well as the language itself.
//   Only then can we hope for real PROGRESS - and avoid the eternal FIASCOS of the C++ genre...
// In short, if we sincerely want to move forward, whether we are "conservative" (by persisting in
// programming in C) or "innovative" (by "finally" getting rid of C), we must first point out the
// real flaws of C. ..

// Note: Portability issues are marked with (P)

// Number 10: impossibility to specify directly the values of the fields of a 'struct' parameter in
// the function calls.
// Suppose the function DisplayPoint (int x, int y) ; we can easily call the function with
// explicit coordinates values like DisplayPoint(10,69);
// We now consider using compound parameter (based on simple 'struct' definition) for the
// coordinates...
// However, we hesitate to take the decision, because we know well that in C, we could not call
// the function with explicit coordinates values (like above) anymore.
// Eg. with  struct coord { int x, int y };  DisplayPoint(struct coord *a_p); declaration, 
// we cannot make direct call like  DisplayPoint({10,69}) ;
// we must define a (constant) structure and then make the call with (pointer to) that constant.
// This is of course not a big deal, but that loss of flexibility may be frustating...

// Number 9: impossibility to indicate directly for which "typedef'ed" function ("pointer") an 
// ordinary function is defined.
// Suppose the following declaration: (NB: example has been stolen on Internet)
//
//   typedef int (*add_integer_t)(int, int); //declaration of function pointer
//
// The (ordinary) function 
//
//   int add(int a, int b) {
//      return (a+b);
//   }
//
// can be used to assign some add_integer_t function pointer, like below:
// 
// int main() {
//    add_integer_t addition = add; //typedef assigns a new variable i.e. "addition" to original
//                                  //function "add"
//    int c = addition(11, 11);   //calling function via new variable
//    printf("%d",c);
//    return 0;
// }
// 
// The pity is that if "add" function is not "homegeneous" (i.e assignable to) "add_integer_t" 
// pointers, the compiler will only complain further during the assignation of the function to the
// pointer.
// Thus, the regret is that there is no way to tell the compiler in "add" definition that the
// function must be homegeneous to "add_integer_t".
// Of course, a very simple (good) disposition consists in reminding in a comment line the function
// pointer type against which the function is supposed to be assigned... E.g: 
//
//   // add_integer_t function:
//   int add(int a, int b) {
//      return (a+b);
//   }

// Number 8: (P) missed standardization for alignment, padding and packaging of structured data (#pragma...)
// The original purpose of structures and unions in C is to define "logical" compound data types;
// The physical aspects were simply not specified with these structure definitions...
// However, some physical properties deserve to be clarified:
// - aligned (unpacked) data: such organization favors the CPU but creates a waste of memory.
// - packed data: optimizes memory consumption, but may decrease CPU performance.
// Ad hoc directives (in particular #pragma) were therefore added in the various compilers, but,
// alas, this happened without real consultation, from which arise new problems of standardization
// in the language (P).
// The problem becomes glaring as soon as one uses "packed" structures to represent any kind of
// "normalized" data formats used for data exchange (protocol message format, etc.) because we
// absolutely need to use those non-standard directives to represent these standardized data. In
// other words, we fall in the situation of a snake biting its own tail.

// Number 7: 'typedef' is a very "poor" type definition... 
// 'typedef' is rather a simple type aliasing than a type definition. The mechanism is not
// defective in itself, but the misleading meaning of this keyword 'typedef' is unfortunate and
// source of profound confusion...
// Personal interpretation: 'typedef' doesn't look very natural in C and gives the impression of
// having been added to the language in a hurry; probably a clumsy response to the competing
// languages of the time - those providing real type definitions (in particular, sub-types and
// abstractions) ...

// Number 6: "Pointer, what pointer ?..." The numerous ambivalences of the pointer concept.
// "Pointers" are showing everywhere in C ; however, WHAT is EXACTLY a pointer in C ? Actually, a
// lot of different answers are possible... 'Pointer' is a "phantom" concept in C. 
// Examples of pitfalls caused by that ambivalence:
// Ex1: pf() vs. *pf() 
// Suppose 'pf' is a (valid!) "function pointer"... To call the function pointed by pf, should we
// type '*pf();' or simply 'pf();' ?
// Modern compilers accept both notations (which are totally equivalent). However, your favour for
// one of the forms is actually linked with your own "instinctive" conception of C pointer. The
// fact is that the language "refuses" to tell which representation is the good one!    
// Ex2: the nature of entities declared with [] notations. Basically, one (naively) say : "When I
// want to declare a pointer p, I can use *p or p[] notations, which are equivalent - I just have
// not to confuse p[<some size>] with p[] which are indeed totally different declarations..."
// Actually, both parts of the proposition are not true (i.e *p and p[] are not always equivalent
// in declarations AND p[] and p[<some size>] are sometimes equivalent (to *p) in declarations).
// And as usual, the real complications are caused by absence of portability. (P)
// Some concrete pitfalls : we define char p[] = "blabla"; in the .c (private) source. We report
// the extern char p[]; declaration in the .h header. Some time later, some "zealous" guy decides
// to replace in the .h the extern char p[];  with the (supposed equivalent) extern char *p;
// declaration (guy's possible  motivation: "let's be more homogeneous with the other 
/  declarations", "in conformance with MY nomenclature", etc.) ...
// If there is an inconsistency between the definition and the declaration of p, the compiler will
// normally warn us... Unless the source code is not recompiled ; in such case, the linker alone is
// not capable to detect the inconsistency, and the application will crash... 
// 2nd pitfall: Given function declaration f(char p[256]); , what is the value of sizeof(p) in f ?
// Some compilers give the size of a pointer (ah?) instead of 256...  (P)
// Worse, among compilers giving the size of a pointer with the declaration f(char t[256]); ,
// some of them give the size 256 with the declaration typedef char t256[256]; f(t256p); (P)
// This is of course in relation with flaw Number 7 : "typedef" thus looks like a very simple
// aliasing mechanism... with a few (non-portable) subtleties, just there to confuse the "average"
// programmer... 

// Number 5: (P) 'printf' format specifiers (%d %lu %s, etc.) are linked to bare data types (%d for
// int, etc.) 
// Of course, that was not a problem in the early times of C - when I was even not sure 'typedef'
// was existing at that epoch... (See flaw Number 7)
// But as soon as, for good or bad reasons, we begin to play with typedef-based data types
// "abstractions", it becomes rapidly complicated to construct and maintain consistent 'printf
// clauses'. 
// Fortunately, modern C compilers detect 99.9% of the problems...
// However, a problem remain: as long as we use a type 'abstraction' in the arguments, such clause
// is not portable... (P)
// Example: time_t t; ... printf("t=%d\n", t); is adapted to "signed" time_t, but actually time_t
// is not always signed. To avoid compiler complaining, you can of course 'cast' the "abstracted"
// parameters to "good" 'raw type', like :
// printf("t=%d\n", (int)t);
// But it's NOT so a satisfactory solution : on "wrong" platforms, programs still provide "wrong"
// display... 

// Number 4: ambiguity of 'void*' data type that can represent a "pure address" OR a "generic"
// parameter.
// Often, generic data indeed represent a generic address (pointer of entity of unspecified 
// type...) but that is not always the case : sometimes, we need that "generic" data represent
// plain integer values - not address. 
// Actually, the situation is even more complicated, because we also have to consider the "generic"
// conversion of floating values...
// The result is that "generic" data management is not truely transparent in C... (P)
// which, again, is quite paradoxal... 
// Morality: we really miss true "generic data type" (other that 'void*' ersatz) in C.

// Number 3:
// 'const' type qualifier may make code more... fragile! (in fact, it's casting operator's fault)
// 'const' type qualifier's intention is of course to make the code more robust. In many cases,
// 'const' is indeed an improvement. An obvious example is the protection against modifications of
// char strings parameters passed to functions. (e.g char *strcpy(char *dest, char *src); => 
// char *strcpy(char *dest, const char *src);)
// In some cases, however, the advantage is less evident... Actually, programmer must be AWARE that
// (s)he has to do a TRADE OFF...
// Such "Conelian choices" arise with record data fields, because the need for 'const' protection is
// context-dependent. Suppose, for example, we want to protect the "name" data field (of some data
// structure) from inopportune modifications... Yet, that "name" data field needs first to be set-up
// - and thus modified - during an "initialization" phase... 
// The natural "solution" seems to be: let's set the 'const' qualifier on the data field ; during
// the "initialization", we "just have" to cast the field with SUPPOSED equivalent "constless" data
// type... (*) 
// But, that's the point : casting operations are by essence dangerous dispositions (remember,
// casting (pseudo-)operations DISABLES any data type consistency CONTROLS made by the compiler, and
// by the way transform simple compilation problems into application crashes that must, of course, be
// avoided).  
// So, 'const' does provides effective protection against invalid data changes, which are specific
// forms of data corruption, but the price to pay for this protection is a real risk of causing
// application crashes, which are "generalized" forms of data corruption... (**)
// So, in such circumstances, the wisest course is to simply forego the "protection" offered by
// "const"..
// Morality : 'const' qualifier may be useful, but is FAR to be the Panacea.
// (*) Ideally, C would propose an "intelligent" casting operator that would just remove the
// 'constness' constraint (for one time, C++ marks a real point over C :p)...
// (**) As illustration of the idiom "Being between Scylla and Charybdis".

// Number 2: Silent overflows. There is NO bullet-proof means in C to detect basic integer 
// overflows !... (*)
// Initially, that limitation was consistent with the language's philosophy: it's up to the
// programmer to anticipate. Such approach remains reasonable and applicable while programmers keep
// fair control on the nature of the integer data (size and  signedness). However, inopportune
// typedefs (which "opacify" without reason - just for the pleasure - the data types) complicate
// the situation...
// (*) This serious problem persists in C++. C++ does well provide a mechanism that mimics ADA's
// exceptions, but that mechanism is actually useless regarding numbers' OVERFLOWS. The problem is
// that, though the 'overflow_error' is well defined with the C++ standard, we still have to raise it
// "manually" in the code if we want to handle it as exception.  It's like you have a shiny car in
// your hands, with a lot of sophisticated controls on the dashboard, but there's no engine under the
// hood - you have to pedal (and to simulate the engine noise with your mouth) to move forward...

// Number 1: Unreadable C interface headers - mess with portability flags. 
// This is not an originel flaw of the language. But now, after more than forty years of (often
// benevolent) "cow-boys" interventions, all standard and system (.h) headers - which directly
// affect the quality of the C programming environment - have ended up looking like nothing and are
// totally unreadable... 

// Number 0: Desesperatly poor makeup of many standard C libraries (string handling, etc...) =>
// rather dishonest argument (against the C LANGUAGE) of C++ bigots.

// Number -1: '\0'-terminated strings convention (inheritance from 8-bits CPUs assemblers ?) 
// Practical problem in brief: crappy representation of strings => crappy code and functions
// manipulating strings => presence of a lot of crappy code in C programs "in general"...
// The convention of strings terminated with '\0' is quite well accepted by programmers because it
// seems so simple and efficient. In specific cases - "early" programs developped in the 70s (as
// with my videopac toy "computer" from the year 1978), "low level" drivers, etc. - this
// representation is indeed, by far, the most effective one can imagine...
// ...Unfortunately, there is a huge DOWNSIDE: this representation simply does NOT allow you to
// handle ORDINARY PORTIONS of such strings... Now, - what bad luck! -, in ordinary applications,
// MOST of strings processings (notably the "parsings") precisely manipulate strings PORTIONS.


// Moralited:
// C, qualified (ag l'edpoque du moins) de langage "edvolued", est en redalited passablement
// rustique. Nous sommes toujours surpris par ses notations edtranges et sa syntaxe archaitque..
// En dedpit de ses imperfections origineles et d'une edvolution parfois cahotique - voire
// contre-productive, C reste, dans l'ensemble, raisonnablement cohedrent et conserve son
// "statut" de meilleur intermeddiaire de programmation edxistant entre l'humain (qui "lit" le
// code source) et la machine (qui "lit" le code exedcutable)...
// En l'attente de son vedritable digne successeur - celui qui corrigera ses vrais dedfauts - C
// demeure "aujourd'hui" le langage de "redfedrence" pour la production d'applications dans un
// langage compiled. C est ag l'industrie du logiciel:
// - ce que Louis XI fut ag l'Histoire de France...
// - ce que le Tampon JEX est au mednage: 
// "Je suis MOCHE, mais [qu'est-ce-que] je BOSSE !!!"
