// blotex.topo, version 1.92 (ANSI)
// (c) Atos-Euronext Belgium - 2008
// (c) Puduku - 2023

// Description: blot expressions management 
// Basic stuff allowing to add some "intelligence" (based on expression evaluation) in blotcode.
//
// NOTE: blotex lib provides "script-like programming" capabilites to blot code.
// Advantage: enhance flexibility of blot code, BUT keep in mind the drawback:
// scripting features means natural tendency to produce complex (or tricky) code (solely
// maintenable by programmers), yet the initial (laudable) intention of blot code was to
// remain fairly legible by non computer experts... 


// Using blotex in blot code
// =========================
//
// I. Blot expressions (blotex) 
// ----------------------------
//
// There two types of blot expressions: 
// - "string" blotex => "strex" type
// - "blotval" blotex: signed integer (aka C's "int" type) => "intex" type
// <blotex> ::= <intex> | <strex> 
//
// Blot expressions are made of "atoms" :
// <intex> ::= <intex atom> ( <int 2op> <intex> )*  
// <strex> ::= <strex atom> ( <str 2op> <strex> )*  
//
// The atoms are made of constants, variables and "register operations".
// <intex atom> ::= [ <int 1op> ] ( <int constant> | <blotvar> | <blotvar entry> | <blotvar id> |
//   <int blotreg op> ) 
// <strex atom> ::= <str constant> | <blotvar strex> | <blotvar name> | <str blotreg read op> 
//
// Constant expressions
// <int constant> ::= <decimal int constant> | <hexadecimal int constant> 
// <decimal int constant> ::= [ '-' ] ( <decimal digit> )+
// <hexadecimal int constant> ::= ( '0x' | '0X' ) ( <hexadecimal digit> )+
// <str constant> ::= '"' ( <single char> )* '"'
// String example: "Julie" 
// Integer example: 69 
// Reminder: blotval's convention : 
// - 0 : represents "true" boolean value
// - !=0 : represents "false" boolean value
//
// Entities
// - blotreg
// - blotvar
// - blot table
// are identified by their name (may be empty).
//
// <entity name> ::= ( <letter> | <digit> | '_' )*
//
// Variables and registers
// A Blot variable (blotvar) stores a blotex value.
// A register (blotreg) is a collection of blovars
// (the register with empty name is called the global register)
// <blotvar> ::= <entity name> ( '.' <entity name>  | '[' <intex> ']' | '{' <intex> '}' ) 
// Blotvar examples: 
// .toto => "toto" blotvar of global register
// recettes.bolo => "bolo" blotvar of "recettes" register
// recettes[0] => 1st blotvar stored in "recettes" register 
// [1] => 2nd blotvar stored in global register 
// recettes[.toto] => "recettes" register's blotvar indexed by "toto" global blotvar  
// recettes{69} => blotvar with id. 69 in "recettes" register 
// {69} => global blotvar with id. 69
// {-69} => global blotvar with id. -69
//
// Blotvar implicit integer value
// A blotvar value is implicitly an integer value
// Examples:
// .toto => "toto" global blotvar integer value 
//
// Blotvar string value 
// <blotvar strex> ::= <blotvar> '$' 
// Examples:
// .toto$ => "toto" global blotvar string value 
// recettes{69}$ => string value of blotvar with id. 69 in "recettes" register 
// recettes[.toto]$ => string value of "recettes" register's blotvar indexed by "toto" global blotvar
//
// Blotvar name, id. and entry
// <blotvar name> ::= <blotvar> '!$'
// <blotvar entry> ::= <blotvar> '!#'
// <blotvar id> ::= <blotvar> '!'
// Examples
// toto!$ => "toto" global blotvar's name, that is "toto"
// recettes[0]!$ => name of 1st blotvar stored in "recettes" register 
// {69}!$ => name of global blotvar with id. 69  
// .toto! => id of "toto" global blotvar
// recettes.bolo!# => index (entry) of "bolo" blotvar in "recettes" register
// .toto!# => index (entry) of "toto" global blotvar 
//
// Register operations 
// <int blotreg op> ::= <entity name> '?' <int blotreg op details>  
// <int blotreg op details> ::= <blotreg init> | <blotreg reset> | <blotreg fetch> |
//   <blotreg read int> 
// <str blotreg read op> ::= <entity name> '?=$'  
// <blotreg init> ::= ':' <blot request> ':?'
// <blotreg reset> ::= '^'
// <blotreg fetch> ::= '+'
// <blotreg read int> ::= '='
//
// Operators 
// operators allows to combine expressions together 
// <int 1op> ::= '!' | '+' | '-' 
// <int 2op> ::= '+' | '-' | '*' | '/' | '&&' | '!!'
// Logical operators ('!', '&&' and '!!') combine integer expressions together, "seen" as booleans.
// <str 2op> ::= '+' 
// ('+' operator applied on strings is a concatenation)
// 
//
// II. "blotex" library's functions (those to be placed in blot code)
// --------------------------------
//
// Eval ([ <blotvar> := ] <intex>)
// Eval ([ <blotvar strex> := ] <strex>)
// ---- 
//
// Evaluate the blotex and eventually assign the result into a blotvar.
//
// Passed:
// - blotvar: variable name (if passed)
//   If the blotvar was not existing, it is automatically allocated by the function
// - intex: blotex integer expression
// - strex: blotex string expression
//
// Possible abandonment reasons:
// - assignement error:
//   + mismatch between blotvar and blotex types
// - blotex evaluation error:
//   + syntax error / type error in blotex
//   + (syntax error) problem in arguments passed to be blot function 
//   + (type error) type mismatch between blotvar and blotex arguments of be blot function 
//   + unknown blotvar / blotex function in blotex expression 
//   + value error in blotex expression
//   + overflow error : 
//
// Blotval:
// - blotex is a strex => always 0 ("true" blotval)
// - blotex is a intex => blotex value 
//
// Surrogate: None 
//
// Examples:
//   Eval (recettes?: == "*bolo*" || >= "c*" :?) => new register selection 
//   Eval (recettes?^) => single reset, ascending 
//   Eval (recettes?+) => fetch next one
//   Eval (var := recettes?=) => read current int value 
//   Eval (var$ := recettes?=$) => read current str value 
//   Eval (^recettes2?: name == "*bolo*" || >= "c*" or price < 10 :?) => new table selection 
//   Eval (recettes?^) => single reset, ascending 
//   Eval (^recettes2?+) => fetch next one 
//   Eval (var$ := ^recettes?=name) => read current name 
//   Eval (^recettes2?=price := 15) => update current price 
//   Eval (^recettes2?@) => insert new table record  
//   Eval (^recettes2?=name := "craboutchas") => new record name 
//
//
// OutputF (<format> <blotex> ) 
// -------
//
// Replace blot with content, following format
//
// Passed:
// - format
//   <format> ::= '%' [ <modifiers> ] ( <alla c specifier> | <binary specifier> )
//   <alla c specifier> ::= ( 'd' | 's' | 'x' | 'X' ) 
//   <binary specifier> ::= ( 'LE' | 'BE' )
//     Binary specifier : output intex in raw binary
//     + 'LE' : little endian (Intel) order 
//     + 'BE' : big endian (Internet) order 
//     (see examples below) 
//     Reminder: intex type handles signed values (2 complement)
// - blotex: 
//   strex for 's' specifier 
//   intex otherwise 
//
// Possible abandonment reasons:
// - formatting error:
//   + wrong format 
//   + truncation error: 
// - blotex evaluation error:
//   + syntax error / type error in blotex
//   + (syntax error) problem in arguments passed to be blot function 
//   + (type error) type mismatch between blotvar and blotex arguments of be blot function 
//   + unknown blotvar / blotex function in blotex expression 
//   + value error in blotex expression
//   + overflow error : 
//
// Blotval (if not abandonned):
// 0 ("true") 
//
// Surrogate: output content as specified in parameters... 
//
// Examples:
//   OutputF (%d, var) 
//   OutputF (%03d, var) 
//   OutputF (%04X, var) 
//   OutputF (%4LE, var) => little endian, four bytes 
//    little endian (less significant byte at lowest address) is compliant with X86 (Intel) hardware 
//   OutputF (%8BE, var) => big endian (network order), four bytes 
//    big endian (most significant byte at lowest address) is compliant with historical UNIX
//    hardware (Motorola 68000, Sun SPARC); big endian corresponds to the (Internet) network byte
//    order. 
//   OutputF (%s, var$) 
//   OutputF (%.10s, var$) 

