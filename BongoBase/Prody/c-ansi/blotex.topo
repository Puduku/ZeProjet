// blotex.topo, version 1.92 (ANSI)
// (c) Atos-Euronext Belgium - 2008
// (c) Puduku - 2023

// Description: blot expressions management 
// Basic stuff allowing to add some "intelligence" (based on expression evaluation) in blotcode.
//
// NOTE: blotex lib provides "script-like programming" capabilites to blot code.
// Advantage: enhance flexibility of blot code, BUT keep in mind the drawback:
// scripting features means natural tendency to produce complex (or tricky) code (solely
// maintenable by programmers), yet the initial (laudable) intention of blot code was to
// remain fairly legible by non computer experts... 


// Using blotex in blot code
// =========================
//
// I. Blot expressions (blotex) 
// ----------------------------
// Legend:
// - <entity>             => "soft" lexeme ; leading white spaces are systematically REMOVED
// - <<single char>>      => "hard" lexeme ; leading white spaces are NOT REMOVED
// - [ <int 1op> ]        => zero or one occurence of <int 1op>
// - ( <entity> )+        => one occurence of <entity> at least
// - ( <<single char>> )* => any occurence(s) number of <<single char>> 
//
// There two main types of blot expressions: 
// - "string" blot expression => "strex" type
// - "blotval" (aka. signed integer) blot expression => "intex" type:
// <blotex> ::= <intex> | <strex> 
//
// Blot expressions are made of operations:
// <intex> ::= <intex term> ( <term op> <intex term> )*  
// <strex> ::= <strex atom> ( '+' <strex atom> )*  
// '+' operator applied on string atoms is a concatenation.
// <term op> ::= '+' | '-' | '&&' | '||'
// Pseudo-logical operators '&&' (logical AND) and '||' (logical OR) combine integer expressions
// together, "seen" as booleans (see below).
//
// Integer terms are made of factoral operations on (integer) atoms:
// <intex term> ::= <intex atom> ( <fact op> <intex atom> )*  
// Integer comparisons are assimilated to factoral operations:
// <fact op> ::= '*' | '/' | <comp op> 
// General comparison operators are:
// <comp op> ::= '>' | '<' | '>=' | '<=' | '==' | '!='
// A comparison result is a "pseudo-boolean" blotval integer.
// Reminder: blotval's convention : 
// - 0 : represents "true" boolean value
// - !=0 : represents "false" boolean value
//
// NOTICE: see also extensions c-ansi/blottab.topo 
// "int" blotvar references are usable as 'l-value' :
// <int blotvar ref> ::= <blotvar as int> | <blotvar id> | <int blotreg ref>
// "str" blotvar references are usable as 'l-value' :
// <str blotvar ref> ::= <blotvar as str> | <blotvar name> | <str blotreg ref>
//
// Integer and string atoms are made of constants, blot expressions between brackets, variables
// references, strings comparisons, "register" and "table" operations:
// <intex atom> ::= [ <int 1op> ] ( ( '(' <intex> ')' ) | <int constant> | <blotvar as int> |
//   <blotvar entry> | <blotvar id> | <int blotreg> | <strex comp> ) 
// <strex atom> ::= ( '(' <strex> ')' ) | <str constant> | <blotvar as str> | <blotvar name> |
//   <str blotreg>
//
// Unary operators modify integer atoms. Pseudo-logical operator '!' "negates" the integer
// expression "seen" as boolean:
// <int 1op> ::= '!' | '+' | '-' 
//
// A string comparison is valued as (pseudo-boolean) integer atom:
// <strex comp> ::= <strex> <str comp op> <strex>
// <str comp op> ::=  <comp op>  | '===' 
// '===' corresponds to "like" comparison
//
// Constant expressions:
// <int constant> : any integer constants of C language... 
// <str constant> ::= '"' ( <<single char>> )* '"'
// String constant example: "Julie" 
// Integer constant examples: 69 , 0xCACABEBE
//
// Entities. The different entities:
// - blotreg (blot register)
// - blotvar (blot variable)
// are identified by their name (may be empty):
// <entity> ::= ( <<letter>> | <<digit>> | '_' )*
//
// Variables and registers
// A blot variable (blotvar) stores a blotex value.
// A blot register (blotreg) is a collection of blovars
// (the register with empty entity name is called the global register)
//
// Formally a "simple" blotvar is referenced as following (in which the 1st entity name identifies
// the register) :
// <blotvar> ::= <entity> ( '.' <entity>  | '[' <intex> ']' ) 
// Blotvar examples: 
// .toto => toto blotvar of global register
// recettes.bolo => bolo blotvar of recettes register
// recettes[0] => 1st blotvar stored in recettes register 
// [1] => 2nd blotvar stored in global register 
// recettes[.toto] => recettes register's blotvar indexed by toto global blotvar   
//
// "As" suffixes allow to qualify integer and string entities:
// <<as value int>> ::= '#'
// <<as entry>> ::= '!#'
// <<as id>> ::= '!'
// <<as value str>> ::= '$'
// <<as name>> ::= '!$'
// 
// Blotvar implicit and explicit integer value:
// A blotvar value is implicitly an integer value.
// However, reference to integer value of a blotvar may be explicit:
// <blotvar as int> ::= <blotvar> [ <<as value int>> ]
// <blotvar id> ::= <blotvar> <<as id>>
// Examples:
// .toto => 'toto' global blotvar's integer value 
// .toto# => ALSO 'toto' global blotvar's integer value
//
// Blotvar string value: 
// <blotvar as str> ::= <blotvar> <<as value str>> 
// Examples:
// .toto$           => toto global blotvar string value 
// recettes[.toto]$ => string value of recettes register's blotvar indexed by toto global blotvar
//
// Blotvar name and entry:
// <blotvar name> ::= <blotvar> <<as name>>
// <blotvar entry> ::= <blotvar> <<as entry>>
// Examples:
// .toto!$ => toto global blotvar's name, that is "toto"
// recettes[0]!$ => name of 1st blotvar stored in recettes register   
// recettes.bolo!# => index (entry) of bolo blotvar in recettes register
// .toto!# => index (entry) of toto global blotvar 
//
// Register 'r-value' operations :
// Register operations may be combined together in a sequence.
// The global value of the operations corresponds to that of the last operation of the sequence.
// Note: without explicit operation, the default global value is the 'false' pseudo-boolean blotval.
// Most of register operations have an integer value: 
// <int blotreg> ::= <entity> '?' <int blotreg ops>  
// <int blotreg ops> ::=  [ <blotreg op select> ] [ <blotreg op reset> ] [ <blotreg op next> ]
//   [ <blotreg op read int> ] 
// Selection operation; value is pseudo-boolean "true" blotval: 
// <blotreg op select> ::= ':' <blotreg request>
// Reset operation; value is pseudo-boolean "true" blotval: 
// <blotreg op reset> ::= '^'
// Reset operation; value is pseudo-boolean blotval ("false" when no more):
// <blotreg op next> ::= '+'
// Read current integer value operation (r-value): 
// <blotreg op read int> ::= '=' [ <<as value int>> | <<as entry>> | <<as id>> ]
//
// When the last operation of the sequence reads a string value, the global value of the operations
// sequence is that string value: 
// <str blotreg> ::= <entity> '?' <str blotreg ops>  
// <str blotreg ops> ::= [ <blotreg op select> ] [ <blotreg op reset> ] [ <blotreg op next> ]
//   <blotreg op read str>
// <blotreg op read str> ::= '=' ( <<as value str>> | <<as name>> )  
//
// Blotreg requests are made of "atoms" : 
// <blotreg request> ::= <blotreg request atom> ( <logical 2op> <blotreg request atom> )* ':?'
// <blotreg request atom> ::= <blotreg request atom int> | <blotreg request atom str>
// <blotreg request atom int> ::= [ <<as value int>> | <<as entry>> | <<as id>> ] ( '*' | (
//   <comp op> <intex> ) )
// <blotreg request atom str> ::= ( <<as value str>> | <<as name>> ) ( '*' | ( <str comp op> <strex>
//   ) )
//
// <logical 2op> ::= 'and' | 'or'
//
// Register 'l-value' operations :
// Set current int value operation (l-value): 
// <blotreg ref op set int> ::= '=' [ <<as value int>> | <<as id>> ]
// <int blotreg ref> ::= <entity> '?' <blotreg ref op set int>
//
// Set current str value operation (l-value): 
// <blotreg ref op set str> ::= '=' ( <<as value str>> | <<as name>> )  
// <str blotreg ref> ::= <entity> '?' <blotreg ref op set str> 
//
// Examples:
// recettes?: !$ * :$                              => select all items, ordered by name  
// recettes?: !$ === "*bolo*" and # >= 69 :?       => new register selection 
// recettes?^                                      => single reset, ascending 
// recettes?+                                      => fetch next one
// recettes?=                                      => read current int value 
// recettes?+=                                     => fetch and read int value 
// recettes?=$                                     => read current str value 
// recettes?: !$ === "*bolo*" :?+=$                => read str value of 1st 'bolo' recette  
// 
//
// II. "blotex" library's functions (those to be placed in blot code)
// --------------------------------
//
// Eval ([ <int blotvar ref> := ] <intex>)
// Eval ([ <str blotvar ref> := ] <strex>)
// ---- 
//
// Evaluate the blotex and eventually assign the result into a blotvar.
//
// Passed:
// - int blotvar ref: int blotvar reference (if passed)
//   If the blotvar was not existing, it is automatically allocated by the function
// - str blotvar ref: str blotvar reference (if passed)
//   If the blotvar was not existing, it is automatically allocated by the function
// - intex: blotex integer expression
// - strex: blotex string expression
//
// Possible abandonment reasons:
// - assignement error:
//   + mismatch between blotvar and blotex types
// - blotex evaluation error:
//   + syntax error / type error in blotex
//   + (syntax error) problem in arguments passed to be blot function 
//   + (type error) type mismatch between blotvar and blotex arguments of be blot function 
//   + unknown blotvar / blotex function in blotex expression 
//   + value error in blotex expression
//   + overflow error : 
//
// Blotval:
// - blotex is a strex => string length 
// - blotex is a intex => blotex value 
//
// Surrogate: None 
//
// Examples:
//   Eval (.var$ := "craboutchas")         => assign "craboutchas" to 'var' global variable 
//
//
// OutputF (<format> ',' <blotex> ) 
// -------
//
// Replace blot with content, following format
//
// Passed:
// - format
//   <format> ::= '%' [ <modifiers> ] ( <alla c specifier> | <binary specifier> )
//   <alla c specifier> ::= ( 'd' | 's' | 'x' | 'X' ) 
//   <binary specifier> ::= ( 'LE' | 'BE' )
//     Binary specifier : output intex in raw binary
//     + 'LE' : little endian (Intel) order 
//     + 'BE' : big endian (Internet) order 
//     (see examples below) 
//     Reminder: intex type handles signed values (2 complement)
// - blotex: 
//   strex for 's' specifier 
//   intex otherwise 
//
// Possible abandonment reasons:
// - formatting error:
//   + wrong format 
//   + truncation error: 
// - blotex evaluation error:
//   + syntax error / type error in blotex
//   + (syntax error) problem in arguments passed to be blot function 
//   + (type error) type mismatch between blotvar and blotex arguments of be blot function 
//   + unknown blotvar / blotex function in blotex expression 
//   + value error in blotex expression
//   + overflow error : 
//
// Blotval (if not abandonned):
// 0 ("true") 
//
// Surrogate: output content as specified in parameters... 
//
// Examples:
//   OutputF (%d, var) 
//   OutputF (%03d, var) 
//   OutputF (%04X, var) 
//   OutputF (%4LE, var) => little endian, four bytes 
//    little endian (less significant byte at lowest address) is compliant with X86 (Intel) hardware 
//   OutputF (%8BE, var) => big endian (network order), four bytes 
//    big endian (most significant byte at lowest address) is compliant with historical UNIX
//    hardware (Motorola 68000, Sun SPARC); big endian corresponds to the (Internet) network byte
//    order. 
//   OutputF (%s, var$) 
//   OutputF (%.10s, var$) 

