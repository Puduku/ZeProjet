// c-ansi/c-parse.topo
// (c) Puduku - 2023

// Goal: Handle ordinary parsings without excessive headaches...
// Idea: give up distinction made a priori between syntactic and lexical analyses.
// Principle: Parsing = mixed hierarchical and sequential assembly of elementary parsing steps...

// A parsing step is thus an elementary operation which extracts "head" lexeme from a sequence (of characters)
// <PARSE-STEP>(S,L) : 
// - S:sequence:
//   + Passed: initial sequence
//   + Updated: remaining sequence after lexeme extraction
// - L:lexeme:
//   + Updated: lexeme extracted at the begin of the sequence

// Notes:
// - The parsing step is, in essence, always a "successful" operation.
// - There is no reason a priori to consider "borderline" cases (such as empty lexeme with unchanged
//   sequence; empty sequence with lexeme corresponding to the initial sequence) as "parsing errors".

// Two "ways" to assemble parsing steps:
// - In a purely sequential assemblage, the sequence of characters passed in (and updated by) the 1st step is
//   passed in the 2nd step.
//   <PARSE-STEP-A>(S,L); <PARSE-STEP-B>(S,L);
// - In a hierarchical assemblage, the lexeme extracted in the 1st step becomes the initial sequence in the 2nd
//   step.
//   <PARSE-STEP-A>(S,LS); <PARSE-STEP-B>(LS,LL);

// Typical parsing "operations" are made in two steps in sequence. For instance, to "read" a token:
// - In 1st step, we "locate" the (begin of) token 
// - In 2nd step, we pass (aka "read") the token,

