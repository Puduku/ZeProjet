// c-stylistic.topo
// (c) Puduku - 2025
// ================== DRAFT ==========================

// Using stylistic devices in C (and other programmming languages)

// In Programming/software development, we (very roughly) distinct the two following phases:
// - conception/design 
// - writing and compiling the code (including testing and debugging)
//
// During conception phase...
// A new design does not emerges from nothing. Rather, new programming concepts (modules,
// classes, processes and so on) are based on adaptation and extension
// (generalization or specification) of existing concepts (ideas, principles, theories) and
// artifacts (devices and natural phenomena).
// The major "engines" used by humans to derive new concepts from existing ones are the
// metaphors and the metonymies...
// Sometimes, the link between the new concept and the one to which it refers can be tenuous.
// As such, it is common to name a new application concept with regard to history and
// mythology. Finally, our brains assimilate new concepts more easily when the references
///are simple and striking.

// Writing code phase...
// It directly appears that an important aspect of code writing is about applying "good"
// naming conventions. 
// The never-ending debate about ‘good naming conventions’ in the realm of software is as
// old as the software industry itself...
// The difficulty of the exercise lies in the fact that programmers DO need to be rigorous
// in their naming conventions... But naming conventions that are too rigid or dogmatic 
// are also completely counterproductive...
// Let us consider two particular ‘extremes’:
-12345789-12 345789-12345789-12345789-12345789-12345789-12345789-12345789-12345789-12345789
// - minimalist naming conventions, based on simple, short names with no hierarchy, make
//   the code far too obscure and inevitably lead to endless naming conflicts;
// - the other extreme, based on descriptive names (which are therefore very long) and
//   using systematic hierarchy, is no more manageable:
//   + long names composed of several words are NOT easily identified by humans and
//     unreasonably increase the weight of the code. 
//   + The excessive length of such code lines (200 characters or more) is also a concern, as
//     it makes routine operations—such as visual comparison (side by side) between versions—very tedious.




// Hense, legible code must be both consise but not ambivalent (with "speaking" names). 
// The two goals seem contradictory and therefore impossible to achieve at the same time.
// Fortunately, figures of speech come to our rescue, allowing us to "reconcile the irreconcilable"...
// naming of new concept : simply use the methaphor
// another simple parade : using metonymies and synecdoches. That is, when applicable, name a concept by a specialisation/generalization/part when applicable.
// We often unconsciously make such metonymies. The danger, then, is of creating serious confusion. 
// To make metonymies our real "friends",  the point is simply to GET AWARE of their using...
// during coding, the magic of stylistic devices is the following: replacing a long descriptive periphrase with a single term. The problem is to ensure that anyone 
// Examples of useful figures of speech:
// - Personification: using a knowm character to name your application
// - Private joke: given the stato quo that we program in English, non English-native programmers use that opportunity to hide (dirty) slan words (in their mother tongue)  within obscure acronyms to
//   programmmers from the "rest of the world"....
