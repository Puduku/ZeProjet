// c-stylistic.topo
// (c) Puduku - 2025
// ================== DRAFT ==========================

// Using stylistic devices in C (and other programmming languages)

// In Programming/software development, we (very roughly) distinct the two following phases:
// - conception/design 
// - writing the code
//
// During conception phase...
// A new design does not emerges from nothing. Rather, new programming concepts (modules, classes, applications and so on) are based on adaptation and extension
// (generalization or specification) of existing, general concepts. General concepts are any ideas, principles, objects, descrptions of phenomenons, theories, etc. developped by (human) minds. 
// The major "engines" used by humans to derive new concepts from existing ones are the metaphors and the metonymies...

// Writing code phase...
// An important aspect of code writing is about applying "good" naming conventions. 
// The un-ending debate related to the "good naming convetions" in software is as old as software itself...
// The difficulty of the exercise is that, programmers, indeed,  HAVE TO be rigorous with the naming conventions... But too rigid or dogmatic naming conventions are also totally counter-productive.
// In particular these two "extremes" :
// - minimalist naming conventions, based on (very) short single names without hierarchization of such names are not legible (due lack of description of concern) and unavoidly lead to grave naming conflicts
// - the other extreme (systematic long descriptive names with hierarchization) is also not manageable properly : longer Multiple-words identifiers are NOT legible to humans and increase
//   artificially and unreasonably the weight of the code. In particular, the exscessive length of the lines of such code (200 characters and more) is a big concern, 
//   because it makes most routine operations - especially visual comparison between versions - very painful.
// Hense, legible code must be both consise but not ambivalent (with "speaking" names). 
// The two goals seem contradictory and therefore impossible to achieve at the same time.
// Fortunately, figures of speech come to our rescue, allowing us to "reconcile the irreconcilable"...
// naming of new concept : simply use the methaphor
// another simple parade : using metonymies and synecdoches. That is, when applicable, name a concept by a specialisation/generalization/part when applicable.
// We often unconsciously make such metonymies. The danger, then, is of creating serious confusion. 
// To make metonymies our real "friends",  the point is simply to GET AWARE of their using...
// during coding, the magic of stylistic devices is the following: replacing a long descriptive periphrase with a single term. The problem is to ensure that anyone 
// Examples of useful figures of speech:
// - Personification: using a knowm character to name your application
// - Private joke: given the stato quo that we program in English, non English-native programmers use that opportunity to hide (dirty) slan words (in their mother tongue)  within obscure acronyms to
//   programmmers from the "rest of the world"....
